
#include "ultrasonic.h"
#include "icu.h"
#include "gpio.h"
#include <util/delay.h>

uint16 g_ultradistance = 0;
uint8 g_edgeCounter = 0;
uint16 g_pulsetime = 0;

void Ultrasonic_init(void)
{
	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
	Icu_init(&Icu_Config); /* initialize ICU driver */
	/* Set the Call back function pointer in the ICU driver */
	Icu_setCallBack(Ultrasonic_edgeProcessing);
	/*Setup the direction for the trigger pin as output*/
	GPIO_setupPinDirection(ultrasonic_trigger_PORT_ID,ultrasonic_trigger_PIN_ID,PIN_OUTPUT);
}

void Ultrasonic_Trigger(void)
{
	/*Send the Trigger pulse to the ultrasonic.*/
	GPIO_writePin(ultrasonic_trigger_PORT_ID,ultrasonic_trigger_PIN_ID, LOGIC_HIGH);
	_delay_us(10);
	GPIO_writePin(ultrasonic_trigger_PORT_ID,ultrasonic_trigger_PIN_ID, LOGIC_LOW);
}

uint16 Ultrasonic_readDistance(void)
{
	/*call trigger function to send the trigger pulse*/
	Ultrasonic_Trigger();

	g_ultradistance = (uint16)(((float) g_pulsetime)/58.8); /*calculate distance*/
	return g_ultradistance;
}

void Ultrasonic_edgeProcessing(void)
{
	g_edgeCounter++;
	if(g_edgeCounter == 1)
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
	}
	else if(g_edgeCounter == 2)
	{
		/* Store the High time value */
		g_pulsetime = Icu_getInputCaptureValue();
		/* Clear the timer counter register to start measurements again */
		Icu_clearTimerValue();
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
		g_edgeCounter=0;
	}
}
